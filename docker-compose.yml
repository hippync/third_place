services:
  postgres:
    image: postgres:16
    container_name: tp_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-thirdplace}
      POSTGRES_USER: ${DB_USER:-thirdplace}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-thirdplace}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: tp_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  opensearch:
    image: opensearchproject/opensearch:2.15.0
    container_name: tp_opensearch
    environment:
      discovery.type: single-node
      plugins.security.disabled: "true"
      bootstrap.memory_lock: "true"
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 30

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: tp_mailhog
    ports:
      - "1025:1025"   # SMTP
      - "8025:8025"   # Web UI

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: tp_keycloak
    command: ["start-dev", "--http-port=${KEYCLOAK_HTTP_PORT:-8080}"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    ports:
      - "8081:${KEYCLOAK_HTTP_PORT:-8080}"

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tp_api
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-thirdplace}
      DB_USER: ${DB_USER:-thirdplace}
      DB_PASSWORD: ${DB_PASSWORD:-thirdplace}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tp_web
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8080}
    ports:
      - "3000:3000"
    depends_on:
      - api

volumes:
  pgdata:
